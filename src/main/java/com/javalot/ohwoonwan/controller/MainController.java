package com.javalot.ohwoonwan.controller;

import com.javalot.ohwoonwan.domain.*;
import com.javalot.ohwoonwan.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PostRepository postRepository;

    @PostMapping(path="/addUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String nickName
            , @RequestParam String email, @RequestParam String phone, @RequestParam String password, @RequestParam Boolean gender, @RequestParam Boolean isAdmin ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User(name, nickName, phone, password, email, gender, isAdmin);
        userRepository.save(n);
        return "User Saved";
    }

    @PostMapping(path="/addPost") // Map ONLY POST Requests
    public @ResponseBody String addNewPost (@RequestParam String category, @RequestParam String title
            , @RequestParam String content, @RequestParam Integer createdBy ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        String createdByStr = String.valueOf(createdBy);
        Optional<User> creator = userRepository.findById(createdBy);
        if (creator.isEmpty()) {
            return "Not found user id = " + createdByStr;
        }
        Post p = new Post(category, title, content, creator.get());
        postRepository.save(p);
        return "Post Saved";
    }

    @GetMapping(path="/allUsers")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/allPosts")
    public @ResponseBody Iterable<Post> getAllPosts() {
        return postRepository.findAll();
    }
}